# -*- coding: utf-8 -*-
"""del_lab6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vg9F68xR2fRrI9KQQPvQVbfJU87IT72O
"""

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
import numpy as np

# Generate synthetic data for demonstration
X, y = make_classification(n_samples=1000, n_features=20, n_informative=10, n_redundant=5, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the multi-task model (example: two tasks)
def build_multitask_model():
    input_layer = Input(shape=(X_train.shape[1],))
    hidden = Dense(64, activation='relu')(input_layer)
    hidden = Dropout(0.5)(hidden)  # Example dropout regularization

    # Task 1 output
    task1_output = Dense(1, activation='sigmoid', name='task1')(hidden)

    # Task 2 output (example: different activation for regression)
    task2_output = Dense(1, activation='linear', name='task2')(hidden)

    model = Model(inputs=input_layer, outputs=[task1_output, task2_output])
    return model

# Build and compile the model
model = build_multitask_model()
# Change is here: providing metrics for each task
model.compile(optimizer='adam',
              loss={'task1': 'binary_crossentropy', 'task2': 'mse'},
              metrics={'task1': 'accuracy', 'task2': 'mse'}) # Specify metrics for each output

# Implement early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Train the model
model.fit(X_train, {'task1': y_train, 'task2': y_train}, epochs=20, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluate the model
loss, task1_loss, task2_loss, task1_accuracy, task2_mse = model.evaluate(X_test, {'task1': y_test, 'task2': y_test}, verbose=0)

print(f"Test Loss: {loss}")
print(f"Task 1 Loss: {task1_loss}")
print(f"Task 2 Loss: {task2_loss}")
print(f"Task 1 Accuracy: {task1_accuracy}")
print(f"Task 2 MSE: {task2_mse}")

# Example prediction
predictions = model.predict(X_test)
print("Predictions:", predictions)